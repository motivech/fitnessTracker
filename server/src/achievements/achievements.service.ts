import { Injectable, NotFoundException, Logger, OnModuleInit } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, IsNull, Not } from 'typeorm';
import { Achievement, AchievementType, AchievementRequirement } from '../entities/Achievement';
import { User } from '../entities/User';
import { Workout, WorkoutStatus } from '../entities/Workout';
import { CreateAchievementDto } from './dto/create-achievement.dto';
import { NotificationsService } from '../notifications/notifications.service';

@Injectable()
export class AchievementsService implements OnModuleInit {
    private readonly logger = new Logger(AchievementsService.name);
    
    constructor(
        @InjectRepository(Achievement)
        private achievementRepository: Repository<Achievement>,
        @InjectRepository(User)
        private userRepository: Repository<User>,
        @InjectRepository(Workout)
        private workoutRepository: Repository<Workout>,
        private notificationsService: NotificationsService,
    ) {}

    async create(createAchievementDto: CreateAchievementDto): Promise<Achievement> {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DTO –≤ –æ–±—ä–µ–∫—Ç —Å—É—â–Ω–æ—Å—Ç–∏ Achievement
        const achievement = new Achievement();
        achievement.name = createAchievementDto.name;
        achievement.description = createAchievementDto.description;
        achievement.type = createAchievementDto.type;
        achievement.points = createAchievementDto.points;
        achievement.requirements = createAchievementDto.requirements as AchievementRequirement;
        
        if (createAchievementDto.badge) {
            achievement.badge = createAchievementDto.badge;
        }
        
        if (createAchievementDto.icon) {
            achievement.icon = createAchievementDto.icon;
        }
        
        return await this.achievementRepository.save(achievement);
    }

    async checkAndAwardAchievements(user: User): Promise<Achievement[]> {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (—à–∞–±–ª–æ–Ω—ã)
            const globalAchievements = await this.achievementRepository.find({
                where: { userId: IsNull() }
            });
            
            // –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            const userAchievements = await this.achievementRepository.find({
                where: { user: { id: user.id } },
            });
            
            const newAchievements: Achievement[] = [];

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
            await this.ensureBasicAchievements(globalAchievements);

            // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º
            const uniqueUserAchievements = await this.removeDuplicateAchievements(userAchievements);
            
            // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ - –ª–æ–≥–∏—Ä—É–µ–º
            if (uniqueUserAchievements.length !== userAchievements.length) {
                this.logger.warn(`–£–¥–∞–ª–µ–Ω–æ ${userAchievements.length - uniqueUserAchievements.length} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
            }

            for (const globalAchievement of globalAchievements) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ, —á–µ–º –ø–æ ID)
                if (uniqueUserAchievements.some(ua => ua.name === globalAchievement.name)) {
                    this.logger.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "${globalAchievement.name}"`);
                    continue;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                const isAchieved = await this.checkAchievementRequirements(user, globalAchievement);
                if (isAchieved) {
                    this.logger.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –≤—ã–ø–æ–ª–Ω–∏–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "${globalAchievement.name}"`);
                    
                    // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ updateUserXP
                    await this.updateUserXP(user, globalAchievement);

                    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                    const userAchievement = new Achievement();
                    userAchievement.name = globalAchievement.name;
                    userAchievement.description = globalAchievement.description;
                    userAchievement.type = globalAchievement.type;
                    userAchievement.points = globalAchievement.points;
                    userAchievement.requirements = globalAchievement.requirements;
                    userAchievement.badge = globalAchievement.badge;
                    userAchievement.icon = globalAchievement.icon;
                    userAchievement.user = user;
                    userAchievement.userId = user.id;
                    userAchievement.dateEarned = new Date();
                    
                    const savedAchievement = await this.achievementRepository.save(userAchievement);
                    newAchievements.push(savedAchievement);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
                    try {
                        await this.notificationsService.notifyAchievement(
                            user.id,
                            globalAchievement.name,
                            globalAchievement.points
                        );
                        this.logger.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id} –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ "${globalAchievement.name}"`);
                    } catch (error: unknown) {
                        const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                        const errorStack = error instanceof Error ? error.stack : '';
                        this.logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏: ${errorMessage}`, errorStack);
                    }
                }
            }

            return newAchievements;
        } catch (error: unknown) {
            const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            const errorStack = error instanceof Error ? error.stack : '';
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ –≤—ã–¥–∞—á–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${errorMessage}`, errorStack);
            return [];
        }
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–∏—Å—Ç–µ–º–µ
     */
    private async ensureBasicAchievements(globalAchievements: Achievement[]): Promise<void> {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è "–ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ä—Ç"
        const activistAchievement = globalAchievements.find(a => a.name === "–ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ä—Ç");
        if (!activistAchievement) {
            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            const baseAchievement = this.achievementRepository.create({
                name: "–ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ä—Ç",
                description: "–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
                type: AchievementType.WORKOUT,
                points: 10,
                requirements: { metric: "total_workouts", value: 1 },
                badge: "start_badge.png",
                icon: "üèÖ"
            });
            
            await this.achievementRepository.save(baseAchievement);
            globalAchievements.push(baseAchievement);
            this.logger.log(`–°–æ–∑–¥–∞–Ω–æ –±–∞–∑–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ä—Ç"`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è "–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ"
        const consistencyAchievement = globalAchievements.find(a => a.name === "–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ");
        if (!consistencyAchievement) {
            // –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            const streakAchievement = this.achievementRepository.create({
                name: "–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ",
                description: "–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
                type: AchievementType.STREAK,
                points: 25,
                requirements: { metric: "streak_days", value: 5 },
                badge: "streak_badge.png",
                icon: "üî•"
            });
            
            await this.achievementRepository.save(streakAchievement);
            globalAchievements.push(streakAchievement);
            this.logger.log(`–°–æ–∑–¥–∞–Ω–æ –±–∞–∑–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ"`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ"
        const diversityAchievement = globalAchievements.find(a => a.name === "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ");
        if (!diversityAchievement) {
            // –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
            const diverseAchievement = this.achievementRepository.create({
                name: "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ",
                description: "–í—ã–ø–æ–ª–Ω–∏—Ç–µ 10 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π",
                type: AchievementType.EXERCISE,
                points: 20,
                requirements: { metric: "exercise_count", value: 10 },
                badge: "diversity_badge.png",
                icon: "üîÑ"
            });
            
            await this.achievementRepository.save(diverseAchievement);
            globalAchievements.push(diverseAchievement);
            this.logger.log(`–°–æ–∑–¥–∞–Ω–æ –±–∞–∑–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ"`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è "–°–ø–æ—Ä—Ç—Å–º–µ–Ω"
        const athleteAchievement = globalAchievements.find(a => a.name === "–°–ø–æ—Ä—Ç—Å–º–µ–Ω");
        if (!athleteAchievement) {
            // –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            const athleteAch = this.achievementRepository.create({
                name: "–°–ø–æ—Ä—Ç—Å–º–µ–Ω",
                description: "–í—ã–ø–æ–ª–Ω–∏—Ç–µ 10 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
                type: AchievementType.WORKOUT,
                points: 30,
                requirements: { metric: "total_workouts", value: 10 },
                badge: "athlete_badge.png",
                icon: "üèãÔ∏è"
            });
            
            await this.achievementRepository.save(athleteAch);
            globalAchievements.push(athleteAch);
            this.logger.log(`–°–æ–∑–¥–∞–Ω–æ –±–∞–∑–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–°–ø–æ—Ä—Ç—Å–º–µ–Ω"`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è "–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü"
        const marathonAchievement = globalAchievements.find(a => a.name === "–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü");
        if (!marathonAchievement) {
            // –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
            const marathonAch = this.achievementRepository.create({
                name: "–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü",
                description: "–ü—Ä–æ–π–¥–∏—Ç–µ –≤ –æ–±—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ 42 –∫–º",
                type: AchievementType.DISTANCE,
                points: 50,
                requirements: { metric: "total_distance", value: 42 },
                badge: "marathon_badge.png",
                icon: "üèÉ"
            });
            
            await this.achievementRepository.save(marathonAch);
            globalAchievements.push(marathonAch);
            this.logger.log(`–°–æ–∑–¥–∞–Ω–æ –±–∞–∑–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü"`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è "–ü—Ä–æ–≥—Ä–µ—Å—Å"
        const progressAchievement = globalAchievements.find(a => a.name === "–ü—Ä–æ–≥—Ä–µ—Å—Å");
        if (!progressAchievement) {
            // –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
            const progressAch = this.achievementRepository.create({
                name: "–ü—Ä–æ–≥—Ä–µ—Å—Å",
                description: "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 5 —É—Ä–æ–≤–Ω—è",
                type: AchievementType.LEVEL,
                points: 40,
                requirements: { metric: "level", value: 5 },
                badge: "progress_badge.png",
                icon: "üìà"
            });
            
            await this.achievementRepository.save(progressAch);
            globalAchievements.push(progressAch);
            this.logger.log(`–°–æ–∑–¥–∞–Ω–æ –±–∞–∑–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ü—Ä–æ–≥—Ä–µ—Å—Å"`);
        }
    }

    private async checkAchievementRequirements(user: User, achievement: Achievement): Promise<boolean> {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –∏—Ö —Ñ–æ—Ä–º–∞—Ç
        if (!achievement.requirements || !achievement.requirements.metric) {
            this.logger.warn(`–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ${achievement.id} –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π`);
            return false;
        }
        
        const { metric, value } = achievement.requirements;

        switch (metric) {
            case 'total_workouts':
                // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –í–´–ü–û–õ–ù–ï–ù–ù–´–• —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (—Å—Ç–∞—Ç—É—Å COMPLETED), –∞ –Ω–µ –≤—Å–µ—Ö
                const totalWorkouts = await this.workoutRepository.count({
                    where: { 
                        user: { id: user.id },
                        status: WorkoutStatus.COMPLETED // –¢–æ–ª—å–∫–æ –í–´–ü–û–õ–ù–ï–ù–ù–´–ï —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                    },
                });
                this.logger.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è '${achievement.name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: ${totalWorkouts}/${value} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫`);
                return totalWorkouts >= value;

            case 'total_distance':
                // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ –í–´–ü–û–õ–ù–ï–ù–ù–´–• —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
                const workouts = await this.workoutRepository.find({
                    where: { 
                        user: { id: user.id },
                        status: WorkoutStatus.COMPLETED // –¢–æ–ª—å–∫–æ –í–´–ü–û–õ–ù–ï–ù–ù–´–ï —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 
                    },
                });
                const totalDistance = workouts.reduce((sum, workout) => sum + (workout.distance || 0), 0);
                this.logger.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è '${achievement.name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: ${totalDistance}/${value} –∫–º`);
                return totalDistance >= value;

            case 'streak_days': {
                // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥
                const completedWorkouts = await this.workoutRepository.find({
                    where: { 
                        user: { id: user.id },
                        status: WorkoutStatus.COMPLETED
                    },
                    order: { 
                        scheduledDate: 'DESC',
                        createdAt: 'DESC'
                    }
                });
                
                // –ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, —Å–µ—Ä–∏—è —Ä–∞–≤–Ω–∞ 0
                if (completedWorkouts.length === 0) {
                    return false;
                }
                
                // –ù–∞—Ö–æ–¥–∏–º –¥–∞—Ç—ã –≤—Å–µ—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö
                const workoutDates = completedWorkouts.map(workout => {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
                    if (workout.scheduledDate) {
                        return new Date(workout.scheduledDate);
                    }
                    return new Date(workout.createdAt);
                }).sort((a, b) => b.getTime() - a.getTime()); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
                
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–Ω—è–º
                const workoutsByDay = new Map<string, boolean>();
                workoutDates.forEach(date => {
                    const dateString = date.toISOString().split('T')[0];
                    workoutsByDay.set(dateString, true);
                });
                
                // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                const uniqueDates = Array.from(workoutsByDay.keys()).sort().reverse();
                
                // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é —Å–µ—Ä–∏—é –¥–Ω–µ–π
                let maxStreak = 0;
                let currentStreak = 0;
                
                // –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
                const today = new Date().toISOString().split('T')[0];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è
                if (workoutsByDay.has(today)) {
                    currentStreak = 1;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏
                    const checkDate = new Date();
                    
                    for (let i = 1; i < 30; i++) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
                        checkDate.setDate(checkDate.getDate() - 1);
                        const dateString = checkDate.toISOString().split('T')[0];
                        
                        if (workoutsByDay.has(dateString)) {
                            currentStreak++;
                        } else {
                            // –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏
                            break;
                        }
                    }
                }
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Ä–∏—é –∫–∞–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é
                maxStreak = currentStreak;
                
                this.logger.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è '${achievement.name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: ${maxStreak}/${value} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥`);
                return maxStreak >= value;
            }

            case 'level':
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const currentLevel = user.level || 1;
                this.logger.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è '${achievement.name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: ${currentLevel}/${value} —É—Ä–æ–≤–µ–Ω—å`);
                return currentLevel >= value;
                
            case 'exercise_count': {
                // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –≤ –í–´–ü–û–õ–ù–ï–ù–ù–´–• —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
                const userWorkouts = await this.workoutRepository.find({
                    where: { 
                        user: { id: user.id },
                        status: WorkoutStatus.COMPLETED
                    },
                    relations: ['workoutExercises'],
                });
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º Set –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
                const uniqueExercises = new Set<string>();
                
                // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
                userWorkouts.forEach(workout => {
                    workout.workoutExercises?.forEach(exercise => {
                        if (exercise.exerciseId) {
                            uniqueExercises.add(exercise.exerciseId);
                        }
                    });
                });
                
                const exerciseCount = uniqueExercises.size;
                this.logger.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è '${achievement.name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: ${exerciseCount}/${value} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π`);
                
                return exerciseCount >= value;
            }

            default:
                this.logger.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${metric}`);
                return false;
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –æ—á–∫–æ–≤
    private updateUserLevel(user: User): void {
        // –ü–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å, –ø–æ–∫–∞ –æ—á–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç
        while (user.points >= user.level * 100) {
            user.level += 1;
        }
    }

    async getAllAchievements(): Promise<Achievement[]> {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        return this.achievementRepository.find({
            where: { userId: IsNull() }, // –¢–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            order: { type: 'ASC', points: 'ASC' }
        });
    }

    async getUserAchievements(user: User): Promise<Achievement[]> {
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const userAchievements = await this.achievementRepository.find({
            where: { user: { id: user.id } },
            order: { dateEarned: 'DESC' },
        });
        
        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        if (!userAchievements || userAchievements.length === 0) {
            return [];
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏)
        const uniqueAchievements = await this.removeDuplicateAchievements(userAchievements);
        
        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ
        if (uniqueAchievements.length !== userAchievements.length) {
            this.logger.warn(`–£–¥–∞–ª–µ–Ω–æ ${userAchievements.length - uniqueAchievements.length} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö - —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Ñ–∏–∑–∏—á–µ—Å–∫–∏
            for (const achievement of userAchievements) {
                if (!uniqueAchievements.some(a => a.id === achievement.id)) {
                    await this.achievementRepository.remove(achievement);
                }
            }
        }
        
        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –µ—Å—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
        return uniqueAchievements;
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    private async removeDuplicateAchievements(achievements: Achievement[]): Promise<Achievement[]> {
        const uniqueMap = new Map<string, Achievement>();
        
        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–º–µ–Ω–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ —Ä–∞–Ω–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ
        for (const achievement of achievements) {
            if (!uniqueMap.has(achievement.name)) {
                uniqueMap.set(achievement.name, achievement);
            } else {
                const existing = uniqueMap.get(achievement.name);
                // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —Ä–∞–Ω—å—à–µ, —á–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ - –∑–∞–º–µ–Ω—è–µ–º
                if (existing && achievement.dateEarned && existing.dateEarned && 
                    new Date(achievement.dateEarned) < new Date(existing.dateEarned)) {
                    uniqueMap.set(achievement.name, achievement);
                }
            }
        }
        
        return Array.from(uniqueMap.values());
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    async recalculateUserPoints(userId: string): Promise<User> {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await this.userRepository.findOne({ where: { id: userId } });
            if (!user) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const achievements = await this.achievementRepository.find({
                where: { user: { id: userId } }
            });
            
            // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            const uniqueAchievements = await this.removeDuplicateAchievements(achievements);
            
            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏
            const totalPoints = uniqueAchievements.reduce((sum, achievement) => sum + achievement.points, 0);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.points = totalPoints;
            user.calculateLevel(); // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—á–∫–æ–≤
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await this.userRepository.save(user);
            
            this.logger.log(`–ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${totalPoints} –æ—á–∫–æ–≤, —É—Ä–æ–≤–µ–Ω—å ${user.level}`);
            
            return user;
        } catch (err: any) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err.message}`, err.stack);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
    }

    async getLeaderboard(): Promise<{ id: string; username: string; points: number; level: number }[]> {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –æ—á–∫–∞–º–∏ –∏ —É—Ä–æ–≤–Ω—è–º–∏
            const users = await this.userRepository.find();

            // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
            const leaderboardEntries = users.map(user => ({
                userId: user.id,
                firstName: user.firstName || '',
                lastName: user.lastName || '',
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ points –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ XP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                points: user.points || 0,
                level: user.level || 1
            }));
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—á–∫–∞–º (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
            const sortedUsers = leaderboardEntries
                .sort((a, b) => b.points - a.points)
                .slice(0, 10);
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            return sortedUsers.map(user => ({
                id: user.userId,
                username: `${user.firstName} ${user.lastName}`.trim() || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                points: user.points,
                level: user.level
            }));
        } catch (err: any) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: ${err.message}`, err.stack);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤');
        }
    }

    async getUserStats(user: User): Promise<{
        totalWorkouts: number;
        streakDays: number;
        totalDistance: number;
        level: number;
        totalExercises: number;
        completedPrograms: number;
        totalXP: number;
    }> {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const totalWorkouts = await this.workoutRepository.count({
                where: { 
                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
                    user: { id: user.id } 
                }
            });

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userWorkouts = await this.workoutRepository.find({
                where: { user: { id: user.id } },
                relations: ['workoutExercises'],
                order: { createdAt: 'DESC' }
            });
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Å–µ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥ (–¥–Ω–µ–π)
            let streakDays = 0;
            if (userWorkouts.length > 0) {
                // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã—Ö –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤–æ–∑—å–º–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
                const startDate = new Date();
                startDate.setDate(startDate.getDate() - 30);
                
                const recentWorkouts = userWorkouts.filter(workout => 
                    new Date(workout.createdAt) >= startDate
                );
                
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–Ω—è–º
                const workoutsByDay = new Map<string, boolean>();
                recentWorkouts.forEach(workout => {
                    const date = new Date(workout.createdAt).toISOString().split('T')[0];
                    workoutsByDay.set(date, true);
                });
                
                // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é —Å–µ—Ä–∏—é –¥–Ω–µ–π
                const days = Array.from(workoutsByDay.keys()).sort();
                let maxStreak = 0;
                let currentStreak = 0;
                
                for (let i = 0; i < days.length; i++) {
                    if (i === 0) {
                        currentStreak = 1;
                    } else {
                        const currentDate = new Date(days[i]);
                        const prevDate = new Date(days[i-1]);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥—É—Ç –ª–∏ –¥–∞—Ç—ã –ø–æ–¥—Ä—è–¥
                        const diffInDays = Math.round((currentDate.getTime() - prevDate.getTime()) / (1000 * 60 * 60 * 24));
                        
                        if (diffInDays === 1) {
                            currentStreak++;
                        } else {
                            maxStreak = Math.max(maxStreak, currentStreak);
                            currentStreak = 1;
                        }
                    }
                }
                
                maxStreak = Math.max(maxStreak, currentStreak);
                streakDays = maxStreak;
            }
            
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–π–¥–µ–Ω–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
            const totalDistance = userWorkouts.reduce((sum, workout) => 
                sum + (workout.distance || 0), 0
            );
            
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
            const uniqueExercises = new Set<string>();
            userWorkouts.forEach(workout => {
                workout.workoutExercises?.forEach(exercise => {
                    if (exercise.exerciseId) {
                        uniqueExercises.add(exercise.exerciseId);
                    }
                });
            });
            const totalExercises = uniqueExercises.size;
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
            // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º, –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            const completedPrograms = 0; // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            return {
                totalWorkouts,
                streakDays,
                totalDistance,
                level: user.level || 1,
                totalExercises,
                completedPrograms,
                totalXP: user.points || 0
            };
        } catch (err: any) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err.message}`, err.stack);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
    }

    async onModuleInit() {
        // –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        await this.removeDuplicatedAchievements();
    }
    
    /**
     * –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     */
    private async removeDuplicatedAchievements() {
        try {
            // –ù–∞–π–¥–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ü–µ—Ä–≤—ã–π —à–∞–≥", –∫–æ—Ç–æ—Ä–æ–µ –¥—É–±–ª–∏—Ä—É–µ—Ç "–ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ä—Ç"
            const firstStepAchievements = await this.achievementRepository.find({
                where: { name: "–ü–µ—Ä–≤—ã–π —à–∞–≥" }
            });
            
            if (firstStepAchievements.length > 0) {
                this.logger.log(`–ù–∞–π–¥–µ–Ω–æ ${firstStepAchievements.length} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π "–ü–µ—Ä–≤—ã–π —à–∞–≥"`);
                
                // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è "–ü–µ—Ä–≤—ã–π —à–∞–≥"
                for (const achievement of firstStepAchievements) {
                    await this.achievementRepository.remove(achievement);
                }
                
                this.logger.log(`–£–¥–∞–ª–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è "–ü–µ—Ä–≤—ã–π —à–∞–≥"`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –¥—Ä—É–≥–∏—Ö –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const users = await this.userRepository.find();
            
            for (const user of users) {
                const userAchievements = await this.achievementRepository.find({
                    where: { userId: user.id }
                });
                
                if (userAchievements.length > 0) {
                    const uniqueAchievements = await this.removeDuplicateAchievements(userAchievements);
                    
                    if (uniqueAchievements.length !== userAchievements.length) {
                        this.logger.log(`–£–¥–∞–ª–µ–Ω–æ ${userAchievements.length - uniqueAchievements.length} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
                    }
                }
            }
        } catch (error) {
            this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –∏—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getAchievementsWithProgress(userId: string): Promise<any[]> {
        try {
            const user = await this.userRepository.findOne({ where: { id: userId } });
            if (!user) {
                throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            const globalAchievements = await this.achievementRepository.find({
                where: { userId: IsNull() }
            });
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            const userAchievements = await this.getUserAchievements(user);
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            const userStats = await this.getUserStats(user);
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            const achievementsWithProgress = await Promise.all(globalAchievements.map(async (achievement) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–µ–Ω–æ –ª–∏ —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                const userAchievement = userAchievements.find(ua => ua.name === achievement.name);
                const isUnlocked = !!userAchievement;
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                let progress = 0;
                
                if (isUnlocked) {
                    progress = 100; // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –ø—Ä–æ–≥—Ä–µ—Å—Å 100%
                } else {
                    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫–∏
                    progress = await this.calculateAchievementProgress(user, achievement, userStats);
                }
                
                return {
                    id: achievement.id,
                    name: achievement.name,
                    description: achievement.description,
                    type: achievement.type,
                    points: achievement.points,
                    icon: achievement.icon || 'üèÜ',
                    badge: achievement.badge,
                    requirements: achievement.requirements,
                    isUnlocked,
                    progress,
                    dateEarned: userAchievement?.dateEarned,
                };
            }));
            
            return achievementsWithProgress;
        } catch (error) {
            this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º:', error);
            return [];
        }
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    private async calculateAchievementProgress(user: User, achievement: Achievement, userStats?: any): Promise<number> {
        if (!achievement.requirements || !achievement.requirements.metric) {
            return 0;
        }
        
        const { metric, value } = achievement.requirements;
        
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        if (userStats) {
            switch (metric) {
                case 'total_workouts':
                    return Math.min(100, Math.round((userStats.totalWorkouts / value) * 100));
                case 'total_distance':
                    return Math.min(100, Math.round((userStats.totalDistance / value) * 100));
                case 'streak_days':
                    return Math.min(100, Math.round((userStats.streakDays / value) * 100));
                case 'level':
                    return Math.min(100, Math.round((userStats.level / value) * 100));
                case 'exercise_count':
                    return Math.min(100, Math.round((userStats.totalExercises / value) * 100));
                default:
                    return 0;
            }
        }
        
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –≤—ã—á–∏—Å–ª—è–µ–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏
        switch (metric) {
            case 'total_workouts': {
                const totalWorkouts = await this.workoutRepository.count({
                    where: { 
                        user: { id: user.id },
                        status: WorkoutStatus.COMPLETED
                    }
                });
                return Math.min(100, Math.round((totalWorkouts / value) * 100));
            }
            case 'total_distance': {
                const workouts = await this.workoutRepository.find({
                    where: { 
                        user: { id: user.id },
                        status: WorkoutStatus.COMPLETED
                    }
                });
                const totalDistance = workouts.reduce((sum, w) => sum + (w.distance || 0), 0);
                return Math.min(100, Math.round((totalDistance / value) * 100));
            }
            case 'streak_days': {
                // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                const streakDays = await this.calculateStreakDays(user);
                return Math.min(100, Math.round((streakDays / value) * 100));
            }
            case 'level': {
                const level = user.level || 1;
                return Math.min(100, Math.round((level / value) * 100));
            }
            case 'exercise_count': {
                const uniqueExercises = await this.countUniqueExercises(user);
                return Math.min(100, Math.round((uniqueExercises / value) * 100));
            }
            default:
                return 0;
        }
    }
    
    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
     */
    private async calculateStreakDays(user: User): Promise<number> {
        const completedWorkouts = await this.workoutRepository.find({
            where: { 
                user: { id: user.id },
                status: WorkoutStatus.COMPLETED
            },
            order: { 
                scheduledDate: 'DESC',
                createdAt: 'DESC'
            }
        });
        
        if (completedWorkouts.length === 0) {
            return 0;
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–Ω—è–º
        const workoutsByDay = new Map<string, boolean>();
        completedWorkouts.forEach(workout => {
            const date = workout.scheduledDate || workout.createdAt;
            const dateString = new Date(date).toISOString().split('T')[0];
            workoutsByDay.set(dateString, true);
        });
        
        // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é —Å–µ—Ä–∏—é
        const today = new Date().toISOString().split('T')[0];
        
        // –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
        if (workoutsByDay.has(today)) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏
            let currentStreak = 1;
            const checkDate = new Date();
            
            for (let i = 1; i < 30; i++) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
                checkDate.setDate(checkDate.getDate() - 1);
                const dateString = checkDate.toISOString().split('T')[0];
                
                if (workoutsByDay.has(dateString)) {
                    currentStreak++;
                } else {
                    break; // –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏
                }
            }
            
            return currentStreak;
        }
        
        return 0; // –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —Å–µ—Ä–∏—è —Ä–∞–≤–Ω–∞ 0
    }
    
    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
     */
    private async countUniqueExercises(user: User): Promise<number> {
        const workouts = await this.workoutRepository.find({
            where: { 
                user: { id: user.id },
                status: WorkoutStatus.COMPLETED
            },
            relations: ['workoutExercises']
        });
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Set –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
        const uniqueExercises = new Set<string>();
        
        workouts.forEach(workout => {
            workout.workoutExercises?.forEach(exercise => {
                if (exercise.exerciseId) {
                    uniqueExercises.add(exercise.exerciseId);
                }
            });
        });
        
        return uniqueExercises.size;
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—â–∏–π XP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    private async updateUserXP(user: User, achievement: Achievement): Promise<void> {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const currentPoints = user.points || 0;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            const newPoints = currentPoints + (achievement.points || 0);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ points –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            await this.userRepository.update(user.id, { 
                points: newPoints 
            });
            
            // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
            this.updateUserLevel(user);
            
            this.logger.log(`–û–±–Ω–æ–≤–ª–µ–Ω XP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}: ${currentPoints} -> ${newPoints}`);
        } catch (error: any) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ XP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
        }
    }
} 
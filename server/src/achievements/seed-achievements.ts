import { Injectable, Logger } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, IsNull } from 'typeorm';
import { Achievement, AchievementType, AchievementRequirement } from '../entities/Achievement';

@Injectable()
export class SeedAchievements {
    private readonly logger = new Logger(SeedAchievements.name);
    
    constructor(
        @InjectRepository(Achievement)
        private achievementRepository: Repository<Achievement>,
    ) {}
    
    async seed() {
        const achievementsCount = await this.achievementRepository.count({
            where: { userId: IsNull() } // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        });
        
        // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
        if (achievementsCount > 0) {
            this.logger.log(`–£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ${achievementsCount} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é.`);
            return;
        }
        
        this.logger.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...');
        
        // –ú–∞—Å—Å–∏–≤ —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
        const baseAchievements = [
            // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            {
                name: '–ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
                description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
                type: AchievementType.WORKOUT,
                points: 10,
                requirements: { metric: 'total_workouts' as const, value: 1 },
                icon: 'üèãÔ∏è'
            },
            {
                name: '–õ—é–±–∏—Ç–µ–ª—å —Ñ–∏—Ç–Ω–µ—Å–∞',
                description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
                type: AchievementType.WORKOUT,
                points: 25,
                requirements: { metric: 'total_workouts' as const, value: 5 },
                icon: 'üèÉ'
            },
            {
                name: '–ù–∞ –ø—É—Ç–∏ –∫ —Å–∏–ª–µ',
                description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 10 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
                type: AchievementType.WORKOUT,
                points: 50,
                requirements: { metric: 'total_workouts' as const, value: 10 },
                icon: 'üí™'
            },
            {
                name: '–¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç—å',
                description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 25 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
                type: AchievementType.WORKOUT,
                points: 100,
                requirements: { metric: 'total_workouts' as const, value: 25 },
                icon: 'üéØ'
            },
            {
                name: '–§–∏—Ç–Ω–µ—Å-–≥—É—Ä—É',
                description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 50 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
                type: AchievementType.WORKOUT,
                points: 200,
                requirements: { metric: 'total_workouts' as const, value: 50 },
                icon: 'üèÜ'
            },
            
            // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å
            {
                name: '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                description: '–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥',
                type: AchievementType.STREAK,
                points: 30,
                requirements: { metric: 'streak_days' as const, value: 3 },
                icon: 'üìÖ'
            },
            {
                name: '–ù–µ–¥–µ–ª—å–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞',
                description: '–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
                type: AchievementType.STREAK,
                points: 70,
                requirements: { metric: 'streak_days' as const, value: 7 },
                icon: 'üîÑ'
            },
            
            // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
            {
                name: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
                description: '–ü—Ä–æ–±–µ–≥–∏—Ç–µ —Å—É–º–º–∞—Ä–Ω–æ 5 –∫–º',
                type: AchievementType.DISTANCE,
                points: 20,
                requirements: { metric: 'total_distance' as const, value: 5 },
                icon: 'üë£'
            },
            {
                name: '–ì–æ—Ä–æ–¥—Å–∫–æ–π –±–µ–≥—É–Ω',
                description: '–ü—Ä–æ–±–µ–≥–∏—Ç–µ —Å—É–º–º–∞—Ä–Ω–æ 20 –∫–º',
                type: AchievementType.DISTANCE,
                points: 60,
                requirements: { metric: 'total_distance' as const, value: 20 },
                icon: 'üèôÔ∏è'
            },
            {
                name: '–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü',
                description: '–ü—Ä–æ–±–µ–≥–∏—Ç–µ —Å—É–º–º–∞—Ä–Ω–æ 42 –∫–º',
                type: AchievementType.DISTANCE,
                points: 150,
                requirements: { metric: 'total_distance' as const, value: 42 },
                icon: 'üèÖ'
            },
            
            // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —É—Ä–æ–≤–µ–Ω—å
            {
                name: '–ù–æ–≤–∏—á–æ–∫',
                description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 2 —É—Ä–æ–≤–Ω—è',
                type: AchievementType.LEVEL,
                points: 15,
                requirements: { metric: 'level' as const, value: 2 },
                icon: '‚≠ê'
            },
            {
                name: '–ü—Ä–æ–≥—Ä–µ—Å—Å–∏—Ä—É—é—â–∏–π',
                description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 3 —É—Ä–æ–≤–Ω—è',
                type: AchievementType.LEVEL,
                points: 30,
                requirements: { metric: 'level' as const, value: 3 },
                icon: '‚≠ê‚≠ê'
            },
            {
                name: '–û–ø—ã—Ç–Ω—ã–π',
                description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 5 —É—Ä–æ–≤–Ω—è',
                type: AchievementType.LEVEL,
                points: 100,
                requirements: { metric: 'level' as const, value: 5 },
                icon: '‚≠ê‚≠ê‚≠ê'
            },
            
            // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
            {
                name: '–†–∞–∑–º–∏–Ω–∫–∞',
                description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 5 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π',
                type: AchievementType.EXERCISE,
                points: 15,
                requirements: { metric: 'exercise_count' as const, value: 5 },
                icon: 'üîÑ'
            },
            {
                name: '–†–∞–∑–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π',
                description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 10 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π',
                type: AchievementType.EXERCISE,
                points: 40,
                requirements: { metric: 'exercise_count' as const, value: 10 },
                icon: 'üåü'
            },
            {
                name: '–ú–∞—Å—Ç–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π',
                description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 20 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π',
                type: AchievementType.EXERCISE,
                points: 90,
                requirements: { metric: 'exercise_count' as const, value: 20 },
                icon: 'üåà'
            },
            
            // –ë–æ–Ω—É—Å–Ω–æ–µ –ª–µ–≥–∫–æ –ø–æ–ª—É—á–∞–µ–º–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            {
                name: '–ü–µ—Ä–≤—ã–π —à–∞–≥',
                description: '–ù–∞—á–∞–ª–æ –≤–∞—à–µ–≥–æ —Ñ–∏—Ç–Ω–µ—Å-–ø—É—Ç–∏',
                type: AchievementType.WORKOUT,
                points: 5,
                requirements: { metric: 'total_workouts' as const, value: 0 }, // –ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —Å—Ä–∞–∑—É
                icon: 'üö∂'
            }
        ];
        
        // –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        for (const achievementData of baseAchievements) {
            const achievement = new Achievement();
            achievement.name = achievementData.name;
            achievement.description = achievementData.description;
            achievement.type = achievementData.type;
            achievement.points = achievementData.points;
            achievement.requirements = achievementData.requirements;
            achievement.icon = achievementData.icon;
            
            await this.achievementRepository.save(achievement);
        }
        
        this.logger.log(`–°–æ–∑–¥–∞–Ω–æ ${baseAchievements.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`);
    }
} 